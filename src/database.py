# -*- coding: utf-8 -*-
# Стандартная директива для указания кодировки UTF-8, обеспечивающая корректную
# обработку русских символов в комментариях и строковых литералах.
"""
Модуль инициализации и настройки объекта базы данных SQLAlchemy для Flask-приложения.

Этот модуль выполняет две ключевые задачи:
1.  Создает глобальный экземпляр объекта `SQLAlchemy` (называемый `db`).
    Этот объект будет служить основным интерфейсом для взаимодействия с базой данных
    во всем приложении: определение моделей, выполнение запросов, управление сессиями.
2.  Предоставляет функцию `init_db(app)`, которая связывает (инициализирует)
    этот глобальный объект `db` с конкретным экземпляром Flask-приложения.
    Такой подход (создание `db` глобально, а инициализация позже) является
    стандартным паттерном при использовании Flask-SQLAlchemy и позволяет избежать
    циклических зависимостей, так как модели могут импортировать `db` из этого модуля
    еще до того, как будет создан экземпляр приложения Flask.

Использование Flask-SQLAlchemy значительно упрощает интеграцию мощного ORM SQLAlchemy
с веб-фреймворком Flask, автоматизируя многие аспекты управления сессиями,
конфигурацией подключения и интеграцией с контекстом приложения Flask.
"""

# Импортируем класс `SQLAlchemy` из расширения `flask_sqlalchemy`.
# `SQLAlchemy` (в контексте `flask_sqlalchemy`) — это класс, который предоставляет
# мост между Flask и основной библиотекой SQLAlchemy. Он добавляет специфичные для Flask
# удобства, такие как автоматическое управление сессиями в контексте запроса,
# интеграцию с конфигурацией Flask (например, `SQLALCHEMY_DATABASE_URI`)
# и помощь в определении моделей.
from flask_sqlalchemy import SQLAlchemy

# Создаём глобальный экземпляр объекта `SQLAlchemy`.
# На этом этапе объект `db` еще не связан ни с каким конкретным Flask-приложением.
# Он просто создан как пустой "контейнер" для будущей конфигурации и моделей.
# Это позволяет импортировать `db` в другие модули (например, в `models.py` для определения
# классов моделей, наследующих от `db.Model`) без необходимости иметь уже созданный
# экземпляр Flask-приложения.
# Такой подход называется " отложенной инициализацией приложения " (deferred app initialization).
db = SQLAlchemy()

# Определяем функцию `init_db` для инициализации объекта `db` с конкретным приложением Flask.
def init_db(app):
    """
    Инициализирует объект базы данных `db` для указанного Flask-приложения.

    Эта функция должна вызываться после создания экземпляра Flask-приложения
    (обычно внутри фабрики приложений `create_app` в `app.py`).
    Она связывает ранее созданный глобальный объект `db` с переданным
    экземпляром `app`, загружая конфигурацию базы данных из `app.config`
    (например, `SQLALCHEMY_DATABASE_URI`, `SQLALCHEMY_TRACK_MODIFICATIONS`)
    и настраивая управление сессиями SQLAlchemy в контексте Flask.

    После вызова этой функции объект `db` становится полностью готовым к использованию
    в рамках данного Flask-приложения (например, для создания таблиц `db.create_all()`
    или для выполнения запросов `db.session.query(...)`).

    Аргументы:
        app (Flask): Экземпляр Flask-приложения, для которого необходимо
                     инициализировать базу данных.
    """
    # Метод `db.init_app(app)` выполняет основную работу по связыванию
    # экземпляра `SQLAlchemy` (`db`) с Flask-приложением (`app`).
    # Он считывает конфигурацию из `app.config` (например, `SQLALCHEMY_DATABASE_URI`),
    # настраивает движок SQLAlchemy, фабрику сессий и другие необходимые компоненты.
    db.init_app(app)

    # Закомментированный блок ниже демонстрирует, как можно было бы автоматически
    # создавать все таблицы в базе данных при инициализации приложения,
    # если бы не использовалась система миграций (например, Flask-Migrate с Alembic).
    # `db.create_all()` создает таблицы в базе данных на основе всех моделей,
    # которые наследуют от `db.Model` и были импортированы к моменту вызова.
    # `with app.app_context():` обеспечивает, что `db.create_all()` выполняется
    # внутри активного контекста приложения Flask, что необходимо для доступа
    # к конфигурации и другим ресурсам приложения.
    # В данном проекте, скорее всего, используется Flask-Migrate, поэтому
    # `db.create_all()` здесь не нужен, так как структура БД управляется миграциями.
    # Оставление этого кода закомментированным может быть полезно для понимания
    # альтернативных подходов или для быстрой настройки в очень простых случаях.
    #
    # Например:
    # with app.app_context():
    #     # Этот вызов создаст таблицы только если они еще не существуют.
    #     # Для управления изменениями схемы существующей БД следует использовать миграции.
    #     db.create_all()

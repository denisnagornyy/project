# -*- coding: utf-8 -*-
# Директива для указания кодировки файла. UTF-8 является стандартом и поддерживает
# широкий диапазон символов, включая кириллицу, что важно для комментариев на русском языке.
"""
Модуль конфигурации приложения Flask.

Этот файл отвечает за определение и загрузку всех конфигурационных параметров,
необходимых для работы приложения. Конфигурация может включать в себя:
- Секретные ключи (для подписи сессий, CSRF-токенов и т.д.).
- Строки подключения к базе данных.
- Пути к различным директориям (например, для временных файлов, логов).
- URL-адреса внешних сервисов и API.
- Флаги режимов работы (например, отладка, тестирование).

Основной подход заключается в использовании переменных окружения для хранения
чувствительных данных и настроек, специфичных для различных сред развертывания
(разработка, тестирование, продакшн). Файл `.env` используется для удобного
определения этих переменных в среде разработки.

Преимущества такого подхода:
1.  **Безопасность**: Секретные данные (пароли, API-ключи) не хранятся напрямую в коде
    и не попадают в систему контроля версий (если `.env` добавлен в `.gitignore`).
2.  **Гибкость**: Легко изменять конфигурацию для разных окружений без изменения кода.
3.  **Централизация**: Все настройки собраны в одном месте, что упрощает управление ими.
"""

# Импортируем модуль `os` из стандартной библиотеки Python.
# Модуль `os` предоставляет функции для взаимодействия с операционной системой,
# такие как работа с путями к файлам и директориям, доступ к переменным окружения и т.д.
# В данном контексте он используется для построения путей к файлам и для доступа
# к переменным окружения (`os.environ`).
import os

# Импортируем функцию `load_dotenv` из библиотеки `python-dotenv`.
# Библиотека `python-dotenv` позволяет загружать переменные окружения из файла
# с именем `.env` (или другого указанного файла) в текущее окружение процесса Python.
# Это очень удобно для разработки, так как позволяет определить все необходимые
# переменные окружения в одном файле, который не включается в систему контроля версий.
from dotenv import load_dotenv

# Определяем абсолютный путь к базовой (корневой) директории проекта.
# Это делается для того, чтобы все остальные пути в конфигурации могли быть
# построены относительно этой базовой директории, независимо от того,
# откуда был запущен скрипт.
# `__file__` — это специальная переменная Python, которая содержит путь к текущему файлу (т.е. `config.py`).
# `os.path.dirname(__file__)` — получает директорию, в которой находится `config.py` (т.е. `src/`).
# `os.path.join(os.path.dirname(__file__), '..')` — объединяет путь к директории `src/`
#   с '..', что означает "подняться на один уровень вверх". Результатом будет путь к корневой
#   директории проекта (например, `/path/to/your/project/`).
# `os.path.abspath(...)` — преобразует полученный относительный путь в абсолютный.
basedir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

# Загружаем переменные окружения из файла `.env`, который должен находиться в корневой директории проекта.
# `os.path.join(basedir, '.env')` конструирует полный путь к файлу `.env`.
# Функция `load_dotenv()` читает этот файл и устанавливает найденные в нем переменные
# как переменные окружения текущего процесса. Если файл `.env` не найден,
# функция ничего не делает и не вызывает ошибку (по умолчанию).
# Переменные, уже установленные в системном окружении, не будут перезаписаны,
# если только не указать `override=True` в `load_dotenv()`.
load_dotenv(os.path.join(basedir, '.env'))

# Определяем класс `Config` для хранения всех конфигурационных параметров приложения.
# Использование класса для конфигурации — это распространенная практика во Flask.
# Атрибуты этого класса будут использоваться для доступа к настройкам в других частях приложения.
class Config:
    """
    Класс для инкапсуляции всех настроек (конфигурационных переменных) приложения.

    Атрибуты этого класса представляют собой различные параметры конфигурации.
    Значения этих атрибутов либо жестко заданы, либо, что предпочтительнее
    для чувствительных данных или изменяемых параметров, загружаются из переменных окружения.
    Flask-приложение будет сконфигурировано с использованием объекта этого класса
    (или его дочерних классов для разных окружений, если это необходимо).
    """

    # Секретный ключ приложения (SECRET_KEY).
    # Это один из самых важных параметров конфигурации Flask.
    # Он используется для криптографической подписи данных, таких как:
    # - Сессионные cookie (для защиты от подделки).
    # - CSRF-токены (для защиты от атак типа "Cross-Site Request Forgery").
    # - Любые другие данные, которые требуют защиты от изменения.
    # `os.environ.get('SECRET_KEY')` пытается получить значение переменной окружения `SECRET_KEY`.
    # Если такая переменная не установлена, используется значение по умолчанию `'your-secret-key'`.
    # **ВАЖНО**: В реальном (продакшн) приложении значение по умолчанию `'your-secret-key'`
    # **АБСОЛЮТНО НЕДОПУСТИМО** и должно быть заменено на длинный, случайный и уникальный ключ,
    # который хранится безопасно (например, в переменной окружения на сервере).
    # Хороший секретный ключ можно сгенерировать, например, так: `python -c 'import secrets; print(secrets.token_hex(32))'`.
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-secret-key' # КРАЙНЕ ВАЖНО ИЗМЕНИТЬ ДЛЯ ПРОДА ИЛИ ХРАНИТЬ В .ENV

    # Строка подключения к базе данных (SQLALCHEMY_DATABASE_URI).
    # Этот параметр используется расширением Flask-SQLAlchemy для определения,
    # к какой базе данных подключаться и как это делать.
    # `os.environ.get('DATABASE_URL')` пытается получить строку подключения из переменной окружения `DATABASE_URL`.
    # Это стандартное имя переменной для URL базы данных, используемое многими платформами (например, Heroku).
    # Если `DATABASE_URL` не установлена, используется строка подключения к локальной базе данных SQLite.
    # `'sqlite:///' + os.path.join(basedir, 'university_registry.db')` создает строку подключения для SQLite.
    #   - `sqlite:///` — это префикс для SQLite. Три слеша означают относительный путь к файлу БД.
    #     Если бы было `sqlite:////`, это был бы абсолютный путь.
    #   - `os.path.join(basedir, 'university_registry.db')` создает путь к файлу `university_registry.db`
    #     в корневой директории проекта. Таким образом, база данных будет храниться в этом файле.
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'university_registry.db')

    # Параметр отслеживания модификаций объектов SQLAlchemy (SQLALCHEMY_TRACK_MODIFICATIONS).
    # Если установлен в `True`, Flask-SQLAlchemy будет отслеживать изменения в объектах сессии
    # и отправлять сигналы. Это может потреблять дополнительные ресурсы.
    # Рекомендуется устанавливать его в `False`, если эта функциональность явно не требуется,
    # чтобы уменьшить накладные расходы. По умолчанию в новых версиях Flask-SQLAlchemy
    # этот параметр уже `False` или вызывает предупреждение, если не установлен.
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Путь к директории для хранения кэшированных или загруженных данных.
    # В данном приложении это может быть место, куда скачиваются архивы с данными
    # Рособрнадзора перед их обработкой.
    # `os.path.join(basedir, 'data')` создает путь к поддиректории `data`
    # в корневой директории проекта. Эту директорию, возможно, потребуется создать вручную
    # или программно, если она не существует.
    DATA_CACHE_PATH = os.path.join(basedir, 'data')

    # URL-адрес для скачивания данных Рособрнадзора.
    # Этот URL должен указывать на источник данных (например, ZIP-архив),
    # который будет загружаться и обрабатываться приложением.
    # `os.environ.get('ROSOBRNADZOR_DATA_URL')` пытается получить URL из переменной окружения.
    # Если переменная не установлена, используется плейсхолдер `'URL_К_ДАННЫМ_РОСОБРНАДЗОРА'`.
    # **TODO**: Этот плейсхолдер **ОБЯЗАТЕЛЬНО** нужно заменить на реальный URL-адрес
    # либо установить соответствующую переменную окружения.
    ROSOBRNADZOR_DATA_URL = os.environ.get('ROSOBRNADZOR_DATA_URL') or 'URL_К_ДАННЫМ_РОСОБРНАДЗОРА' # TODO: Указать реальный URL или установить переменную окружения

# Создаём экземпляр класса `Config`.
# Этот объект `config` не используется напрямую в данном файле, но его наличие
# может быть полезно, если бы другие модули импортировали `config` напрямую из этого файла.
# Однако, более распространенный паттерн во Flask — это загрузка конфигурации
# в объект приложения с помощью `app.config.from_object(Config)`.
# В данном проекте, судя по `app.py`, используется именно `app.config.from_object(Config)`,
# поэтому этот экземпляр `config` здесь может быть избыточным или предназначен для
# каких-то других целей, не связанных напрямую с конфигурацией Flask-приложения.
# Если он не используется, его можно было бы удалить.
# Однако, если какой-то не-Flask компонент ожидает импортировать `config` отсюда, его стоит оставить.
config = Config()

"""
Модуль для определения пользовательских команд интерфейса командной строки (CLI) Flask.

Этот файл использует библиотеку `Click` для создания структурированных и удобных
команд, которые можно выполнять из терминала с помощью `flask <имя_команды>`.
Такие команды часто используются для выполнения административных задач,
запуска фоновых процессов, управления данными и других операций, не связанных
напрямую с обработкой веб-запросов.

Основные компоненты:
- Группа команд `data_cli` (вызывается как `flask data ...`).
- Команда `load_data_command` (вызывается как `flask data load`) для запуска процесса
  загрузки, обработки и сохранения данных из внешних источников (например, Рособрнадзора).
"""

import click

from flask.cli import with_appcontext

from flask import current_app

from .data_loader.loader import DataLoader

def data_cli():
    """
    Группа команд CLI для управления данными реестра образовательных организаций.

    Эта группа объединяет команды, связанные с загрузкой, обновлением,
    и, возможно, другими операциями над данными, используемыми приложением.
    Пример вызова подкоманды: `flask data load`.
    При вызове `flask data --help` будет показана справка по этой группе и её подкомандам.
    """
    pass

@data_cli.command('load')

@with_appcontext
def load_data_command():
    """
    Команда CLI для запуска процесса загрузки, распаковки и обработки данных
    из официальных источников (например, данные Рособрнадзора о лицензиях).

    Эта команда инициирует полный цикл обновления данных:
    1. Создает экземпляр `DataLoader`.
    2. Вызывает метод `run_update()` этого загрузчика, передавая ему текущий
       экземпляр Flask-приложения (`current_app`) для доступа к конфигурации и БД.
    3. Обрабатывает возможные исключения во время выполнения.
    4. Выводит информационные сообщения о ходе и результате операции в консоль.
    """
    click.echo("Запуск процесса обновления данных из команды Flask CLI...")

    loader = DataLoader()

    success = False

    try:
        loader.run_update(app=current_app)
        success = True
    except Exception as e:
        click.echo(f"Критическая ошибка во время выполнения команды: {e}", err=True)
    if success:
        click.echo("Процесс обновления данных завершен (проверьте логи на наличие специфических ошибок обработки отдельных файлов или записей).")
    else:
        click.echo("Процесс обновления данных завершился с критическими ошибками.", err=True)

# -*- coding: utf-8 -*-
# Стандартное указание кодировки UTF-8 для поддержки кириллицы в комментариях и строках.
"""
Модуль для определения пользовательских команд интерфейса командной строки (CLI) Flask.

Этот файл использует библиотеку `Click` для создания структурированных и удобных
команд, которые можно выполнять из терминала с помощью `flask <имя_команды>`.
Такие команды часто используются для выполнения административных задач,
запуска фоновых процессов, управления данными и других операций, не связанных
напрямую с обработкой веб-запросов.

Основные компоненты:
- Группа команд `data_cli` (вызывается как `flask data ...`).
- Команда `load_data_command` (вызывается как `flask data load`) для запуска процесса
  загрузки, обработки и сохранения данных из внешних источников (например, Рособрнадзора).
"""

# Импортируем библиотеку `click`.
# `Click` — это популярная библиотека Python для создания красивых и композитных
# интерфейсов командной строки. Она упрощает парсинг аргументов, создание подкоманд,
# вывод справки и многое другое. Flask интегрируется с Click для своих CLI-команд.
import click

# Импортируем декоратор `with_appcontext` из модуля `flask.cli`.
# `with_appcontext` — это критически важный декоратор для команд Flask CLI, которые
# должны взаимодействовать с самим Flask-приложением (например, для доступа к базе данных,
# конфигурации, или другим расширениям Flask). Он гарантирует, что внутри декорированной
# функции будет установлен и доступен контекст приложения Flask. Без него попытка
# обратиться, например, к `current_app` или `db.session` приведет к ошибке.
from flask.cli import with_appcontext
# Импортируем `current_app` из Flask.
# `current_app` — это прокси-объект, который указывает на текущий экземпляр Flask-приложения,
# активный в данном контексте. Он доступен только тогда, когда контекст приложения "протолкнут"
# (pushed), что и делает декоратор `with_appcontext`.
from flask import current_app

# Импортируем класс `DataLoader` из локального подмодуля `data_loader.loader`.
# `DataLoader`, предположительно, инкапсулирует всю логику, связанную с получением
# данных из внешнего источника (например, скачивание файлов, их распаковка),
# их последующей обработкой (парсинг, трансформация) и сохранением в базу данных приложения.
# Точка перед `data_loader` указывает на относительный импорт из текущего пакета.
from .data_loader.loader import DataLoader

# Создаём группу команд с именем 'data'.
# Декоратор `@click.group('data')` превращает функцию `data_cli` в группу команд.
# Имя 'data' будет использоваться при вызове из командной строки: `flask data ...`.
# Сама функция `data_cli` может быть пустой (`pass`), так как её основная роль — служить
# контейнером для других, более специфичных команд.
@click.group('data')
def data_cli():
    """
    Группа команд CLI для управления данными реестра образовательных организаций.

    Эта группа объединяет команды, связанные с загрузкой, обновлением,
    и, возможно, другими операциями над данными, используемыми приложением.
    Пример вызова подкоманды: `flask data load`.
    При вызове `flask data --help` будет показана справка по этой группе и её подкомандам.
    """
    pass  # Тело функции-группы может быть пустым, если она только объединяет другие команды.

# Определяем команду 'load' внутри группы 'data'.
# Декоратор `@data_cli.command('load')` регистрирует функцию `load_data_command`
# как подкоманду 'load' внутри группы `data_cli`.
# Теперь эту команду можно будет вызвать из терминала как: `flask data load`.
@data_cli.command('load')
# Применяем декоратор `@with_appcontext`. Это необходимо, так как команда `load_data_command`
# будет взаимодействовать с базой данных и конфигурацией приложения Flask.
# Декоратор гарантирует, что `current_app` будет доступен и корректно настроен.
@with_appcontext
def load_data_command():
    """
    Команда CLI для запуска процесса загрузки, распаковки и обработки данных
    из официальных источников (например, данные Рособрнадзора о лицензиях).

    Эта команда инициирует полный цикл обновления данных:
    1. Создает экземпляр `DataLoader`.
    2. Вызывает метод `run_update()` этого загрузчика, передавая ему текущий
       экземпляр Flask-приложения (`current_app`) для доступа к конфигурации и БД.
    3. Обрабатывает возможные исключения во время выполнения.
    4. Выводит информационные сообщения о ходе и результате операции в консоль.
    """
    # `click.echo()` — это функция из библиотеки Click для вывода сообщений в терминал.
    # Она похожа на `print()`, но предоставляет больше возможностей, например,
    # управление цветом вывода и обработку Unicode.
    click.echo("Запуск процесса обновления данных из команды Flask CLI...")

    # Создаём экземпляр класса `DataLoader`.
    # Этот объект будет выполнять всю "грязную работу" по загрузке и обработке данных.
    loader = DataLoader()

    # Флаг для отслеживания успешности выполнения операции.
    # Инициализируется как `False` и устанавливается в `True` только если
    # основной блок `try` завершится без исключений.
    success = False

    try:
        # Основная логика команды: запуск процесса обновления данных.
        # Вызываем метод `run_update()` у объекта `loader`.
        # Передаем `app=current_app`, чтобы `DataLoader` мог получить доступ
        # к конфигурации приложения (например, URL для скачивания данных, пути к файлам)
        # и к сессии базы данных (`db.session`) для сохранения обработанных данных.
        loader.run_update(app=current_app)
        # Если вызов `loader.run_update()` не вызвал исключений,
        # считаем операцию предварительно успешной.
        # Важно: сам метод `run_update` может содержать внутреннюю логику обработки ошибок
        # и логирования, поэтому "успех" здесь означает отсутствие критических сбоев на этом уровне.
        success = True
    except Exception as e:
        # Если во время выполнения `loader.run_update()` произошло любое необработанное исключение,
        # оно будет поймано здесь.
        # Выводим сообщение об ошибке в стандартный поток ошибок (`err=True`).
        # Это важно для систем автоматизации и для того, чтобы ошибки были заметнее.
        click.echo(f"Критическая ошибка во время выполнения команды: {e}", err=True)
        # Для более детальной отладки можно раскомментировать следующие строки,
        # чтобы вывести полный traceback исключения.
        # import traceback
        # click.echo(traceback.format_exc(), err=True)
        # Флаг `success` остается `False`, так как произошла ошибка.

    # В конце выполнения команды выводим итоговое сообщение пользователю.
    if success:
        # Если флаг `success` установлен в `True`, значит, критических ошибок не было.
        click.echo("Процесс обновления данных завершен (проверьте логи на наличие специфических ошибок обработки отдельных файлов или записей).")
    else:
        # Если флаг `success` остался `False`, значит, произошла ошибка.
        click.echo("Процесс обновления данных завершился с критическими ошибками.", err=True)
